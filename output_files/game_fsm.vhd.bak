LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_UNSIGNED.all;

ENTITY game_fsm is
PORT (clock:    IN STD_LOGIC;
      P:        IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      reset:    IN STD_LOGIC;
		font_row_out, font_col_out: OUT STD_LOGIC_VECTOR(2 downto 0)
		character_address_out: OUT STD_LOGIC_VECTOR(5 downto 0));
END game_fsm;

Architecture RTL of game_fsm is
TYPE State_type IS (MENU, PLAY); 
	SIGNAL State : State_Type;   
							   
BEGIN 
  PROCESS (clock, reset) 
  BEGIN
	If (reset = ‘1’) THEN
		State <= MENU;
	
	ELSIF rising_edge(clock) THEN    
 
		CASE State IS
	 
			WHEN MENU => 
				IF P="010" THEN 
					State <= PLAY;
				END IF; 
	 
			WHEN PLAY => 
				IF P="000" THEN 
					State <= MENU; 
				END IF; 
	 
			WHEN others =>
				State <= MENU;
		END CASE; 
   END IF; 
  END PROCESS;

END rtl;